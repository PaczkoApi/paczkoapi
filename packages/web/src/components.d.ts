/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { PickupPoint, Provider } from "@paczkoapi/client";
import { Address } from "@paczkoapi/common";
export { PickupPoint, Provider } from "@paczkoapi/client";
export { Address } from "@paczkoapi/common";
export namespace Components {
    interface PaczkoapiModal {
        /**
          * The title of the map
         */
        "modalTitle": string | null | undefined;
    }
    interface PaczkoapiSelector {
        /**
          * The address to search for pickup points
         */
        "address": Address | null | undefined;
        /**
          * The city to search for pickup points
         */
        "addressCity": string | null | undefined;
        /**
          * The postal code to search for pickup points
         */
        "addressPostalCode": string | null | undefined;
        /**
          * The street to search for pickup points
         */
        "addressStreet": string | null | undefined;
        /**
          * The limit of pickup points to fetch
         */
        "limit": number | null | undefined;
        /**
          * The currently selected pickup point
          * @readonly
         */
        "point": PickupPoint | null;
        /**
          * The currently selected pickup point ID
         */
        "pointName": string | null | undefined;
        /**
          * The currently selected pickup point type
         */
        "pointProvider": Provider | null | undefined;
        /**
          * The prices of pickup points
         */
        "prices": Partial<Record<Provider, number>> | null | undefined;
        /**
          * The providers to search for pickup points
         */
        "providers": Provider[] | Provider;
        "selectPoint": (provider: Provider, id: string) => Promise<void>;
        /**
          * Set the address of the selector
         */
        "setAddress": (address: Address, forceFetch?: boolean) => Promise<void>;
        /**
          * The theme of the selector
         */
        "theme": 'border' | null | undefined;
    }
}
export interface PaczkoapiModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPaczkoapiModalElement;
}
export interface PaczkoapiSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPaczkoapiSelectorElement;
}
declare global {
    interface HTMLPaczkoapiModalElementEventMap {
        "close": void;
    }
    interface HTMLPaczkoapiModalElement extends Components.PaczkoapiModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPaczkoapiModalElementEventMap>(type: K, listener: (this: HTMLPaczkoapiModalElement, ev: PaczkoapiModalCustomEvent<HTMLPaczkoapiModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPaczkoapiModalElementEventMap>(type: K, listener: (this: HTMLPaczkoapiModalElement, ev: PaczkoapiModalCustomEvent<HTMLPaczkoapiModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPaczkoapiModalElement: {
        prototype: HTMLPaczkoapiModalElement;
        new (): HTMLPaczkoapiModalElement;
    };
    interface HTMLPaczkoapiSelectorElementEventMap {
        "selected": PickupPoint;
    }
    interface HTMLPaczkoapiSelectorElement extends Components.PaczkoapiSelector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPaczkoapiSelectorElementEventMap>(type: K, listener: (this: HTMLPaczkoapiSelectorElement, ev: PaczkoapiSelectorCustomEvent<HTMLPaczkoapiSelectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPaczkoapiSelectorElementEventMap>(type: K, listener: (this: HTMLPaczkoapiSelectorElement, ev: PaczkoapiSelectorCustomEvent<HTMLPaczkoapiSelectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPaczkoapiSelectorElement: {
        prototype: HTMLPaczkoapiSelectorElement;
        new (): HTMLPaczkoapiSelectorElement;
    };
    interface HTMLElementTagNameMap {
        "paczkoapi-modal": HTMLPaczkoapiModalElement;
        "paczkoapi-selector": HTMLPaczkoapiSelectorElement;
    }
}
declare namespace LocalJSX {
    interface PaczkoapiModal {
        /**
          * The title of the map
         */
        "modalTitle"?: string | null | undefined;
        /**
          * Event emitted when modal is closed
         */
        "onClose"?: (event: PaczkoapiModalCustomEvent<void>) => void;
    }
    interface PaczkoapiSelector {
        /**
          * The address to search for pickup points
         */
        "address"?: Address | null | undefined;
        /**
          * The city to search for pickup points
         */
        "addressCity"?: string | null | undefined;
        /**
          * The postal code to search for pickup points
         */
        "addressPostalCode"?: string | null | undefined;
        /**
          * The street to search for pickup points
         */
        "addressStreet"?: string | null | undefined;
        /**
          * The limit of pickup points to fetch
         */
        "limit"?: number | null | undefined;
        /**
          * Event emitted when a pickup point is selected
         */
        "onSelected"?: (event: PaczkoapiSelectorCustomEvent<PickupPoint>) => void;
        /**
          * The currently selected pickup point
          * @readonly
         */
        "point"?: PickupPoint | null;
        /**
          * The currently selected pickup point ID
         */
        "pointName"?: string | null | undefined;
        /**
          * The currently selected pickup point type
         */
        "pointProvider"?: Provider | null | undefined;
        /**
          * The prices of pickup points
         */
        "prices"?: Partial<Record<Provider, number>> | null | undefined;
        /**
          * The providers to search for pickup points
         */
        "providers"?: Provider[] | Provider;
        /**
          * The theme of the selector
         */
        "theme"?: 'border' | null | undefined;
    }
    interface IntrinsicElements {
        "paczkoapi-modal": PaczkoapiModal;
        "paczkoapi-selector": PaczkoapiSelector;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "paczkoapi-modal": LocalJSX.PaczkoapiModal & JSXBase.HTMLAttributes<HTMLPaczkoapiModalElement>;
            "paczkoapi-selector": LocalJSX.PaczkoapiSelector & JSXBase.HTMLAttributes<HTMLPaczkoapiSelectorElement>;
        }
    }
}
